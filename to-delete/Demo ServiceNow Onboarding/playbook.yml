- name: Load Devices into ServiceNow 
  hosts: ios    
  gather_facts: false 
  connection: network_cli
  roles:
    - clay584.parse_genie 

  vars_prompt:
    - name: 'ansible_user'
      prompt: 'Enter Device username'
      default: 'cisco'
      private: false
      unsafe: true

    - name: 'ansible_password'
      prompt: 'Enter device password'
      default: 'cisco'    
      private: true
      unsafe: true

    - name: 'ansible_become_pass'
      prompt: 'Enter device priv password'
      default: 'cisco'    
      private: true
      unsafe: true

    - name: 'sn_username'
      prompt: 'Enter ServiceNow username'
      default: 'admin'
      private: false
      unsafe: true

    - name: 'sn_password'
      prompt: 'Enter ServiceNow password'
      default: 'rybkin-zYrje0-wapziv'
      private: true
      unsafe: true

  vars:
     sn_instance: dev75689  #settable
  
  tasks:


  - name: See if device exists in Service Now  
    snow_record_find:
      table: cmdb_ci_ip_router 
      username: "{{ sn_username }}"
      password: "{{ sn_password }}"
      instance: "{{ sn_instance }}"
      query:
          name: "{{ inventory_hostname }}" 
    register: ci_record 
    delegate_to: localhost
    ignore_errors: yes

  - name: gather missing ios device detail 
    ios_command:
      commands:
          - show version
    register: version
    when: ci_record.failed and ansible_network_os == 'ios'

  - name: Set Fact Genie Filter
    set_fact:
      pyats_version: "{{ version['stdout'][0] | parse_genie(command='show version', os='ios') }}"
    when: ci_record.failed and ansible_network_os == 'ios'

  - name: Create a CI for IOS Router if it doesn't exist already
    snow_record:
      state: present
      table: cmdb_ci_ip_router 
      username: "{{ sn_username }}"
      password: "{{ sn_password }}"
      instance: "{{ sn_instance }}"
      data:
        name: "{{ inventory_hostname }}" 
        ip_address: "{{ hostvars[inventory_hostname]['ipv4'] }}"   
        short_description: "{{ hostvars[inventory_hostname]['description'] }}"   
        manufacturer: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        firmware_manufacturer: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        vendor: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        serial_number: "{{ pyats_version.version.chassis_sn }}"
        device_type: Router
        asset_tag: "{{ hostvars[inventory_hostname]['asset_tag'] }}"   
        can_route: True
        can_switch: True
        assigned_to: "{{ hostvars[inventory_hostname]['contact'] }}"   
        assignment_group: "{{ hostvars[inventory_hostname]['device_owner_group'] }}"   
        comments: "{{ hostvars[inventory_hostname]['description'] }}"   
        fqdn: "{{ inventory_hostname }}"
        location: "{{ hostvars[inventory_hostname]['location'] }}"   
        model_number: "{{ pyats_version.version.platform }}"
        model_id: "{{ hostvars[inventory_hostname]['vendor'] }} {{ pyats_version.version.platform }}"
        physical_interface_count: "{{ pyats_version.version.number_of_intfs['Gigabit Ethernet'] }}"
        ram: "{{ pyats_version.version.main_mem }}"
        can_partitionvlans: True
        firmware_version: "{{ pyats_version.version.version }}"
        manfacturer: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        company: "{{ hostvars[inventory_hostname]['customer'] }}"   
        cpu_type: "{{ pyats_version.version.processor_type }}"
    register: new_ios_ci
    delegate_to: localhost
    when: ci_record.failed and ansible_network_os == 'ios'

  - name: gather IOS interface details
    ios_command:
      commands:
          - show ip interface brief 
    register: interface
    when: ci_record.failed and ansible_network_os == 'ios'

  - name: Set IOS Fact Genie Filter
    set_fact:
      pyats_interface: "{{ interface['stdout'][0] | parse_genie(command='show ip interface brief', os='ios') }}"
    when: ci_record.failed and ansible_network_os == 'ios'


  - name: clean up IOS Genie response 
    set_fact:
        ios_interfaces: |-
                {%  set ios_interfaces = []   %}
                {%  for intf,value in pyats_interface.interface.items()  %}
                {%        do ios_interfaces.append(intf) %}
                {%  endfor %}
                {{ ios_interfaces }}
    when: ci_record.failed and ansible_network_os == 'ios'

  
  - name: Add IOS interfaces and link to CI 
    snow_record:
      state: present
      table: dscy_router_interface  
      username: "{{ sn_username }}"
      password: "{{ sn_password }}"
      instance: "{{ sn_instance }}"
      data:
        name: "{{ item }}" 
        cmdb_ci: "{{ new_ios_ci.record.sys_id }}" 
        ip_address: "{{ pyats_interface.interface[item].ip_address  }}"
    delegate_to: localhost
    register: newints 
    loop: "{{ ios_interfaces }}"
    when: ci_record.failed and ansible_network_os == 'ios'

  - name: show version
    asa_command:
      commands:
          - show inventory
    register: version
    when: ci_record.failed and ansible_network_os == 'asa'

  - name: Set Fact Genie Filter
    set_fact:
      pyats_version: "{{ version['stdout'][0] | parse_genie(command='show inventory', os='asa') }}"
    when: ci_record.failed and ansible_network_os == 'asa'

  - name: Create a CI for ASA if it doesn't exist already
    snow_record:
      state: present
      table: cmdb_ci_ip_router 
      username: "{{ sn_username }}"
      password: "{{ sn_password }}"
      instance: "{{ sn_instance }}"
      data:
        name: "{{ inventory_hostname }}" 
        ip_address: "{{ hostvars[inventory_hostname]['ipv4'] }}"   
        short_description: "{{ hostvars[inventory_hostname]['description'] }}"   
        manufacturer: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        firmware_manufacturer: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        vendor: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        serial_number: "{{ pyats_version.Chassis.sn }}"
        device_type: Firewall 
        asset_tag: "{{ hostvars[inventory_hostname]['asset_tag'] }}"   
        can_route: True
        can_switch: True
        assigned_to: "{{ hostvars[inventory_hostname]['contact'] }}"   
        assignment_group: "{{ hostvars[inventory_hostname]['device_owner_group'] }}"   
        comments: "{{ hostvars[inventory_hostname]['description'] }}"   
        fqdn: "{{ inventory_hostname }}"
        location: "{{ hostvars[inventory_hostname]['location'] }}"   
        model_number: "{{ pyats_version.Chassis.pid }}"
        model_id: "{{ hostvars[inventory_hostname]['vendor'] }} {{ pyats_version.Chassis.pid }}"
        can_partitionvlans: True
        firmware_version: "{{ pyats_version.Chassis.vid }}"
        manfacturer: "{{ hostvars[inventory_hostname]['vendor'] }}"   
        company: "{{ hostvars[inventory_hostname]['customer'] }}"   
    register: new_asa_ci
    delegate_to: localhost
    when: ci_record.failed and ansible_network_os == 'asa'

  - name: gather ASA interface details
    asa_command:
      commands:
          - show interface ip brief 
    register: interface
    when: ci_record.failed and ansible_network_os == 'asa'

  - name: Set ASA Fact Genie Filter
    set_fact:
      pyats_interface: "{{ interface['stdout'][0] | parse_genie(command='show interface ip brief', os='asa') }}"
    when: ci_record.failed and ansible_network_os == 'asa'
   
  
  - name: Generate ASA Interface Dict  
    set_fact:
        asa_interface_dict: |-
                {%  set asa_interfaces = dict()  %}
                {%  for intf,value in pyats_interface.interfaces.items()  %}
                {%     for ip in value['ipv4']  %}
                {%        do asa_interfaces.update( { intf  : ip }) %}
                {%     endfor %}
                {%  endfor %}
                {{ asa_interfaces }}
    when: ci_record.failed and ansible_network_os == 'asa'
 
  - name: Generate ASA Interface List  
    set_fact:
         asa_interface_list: "{{ asa_interface_dict.keys() | list }}" 
    when: ci_record.failed and ansible_network_os == 'asa'
          

  - name: Add ASA interfaces and link to CI 
    snow_record:
      state: present
      table: dscy_router_interface  
      username: "{{ sn_username }}"
      password: "{{ sn_password }}"
      instance: "{{ sn_instance }}"
      data:
        name: "{{ item }}" 
        cmdb_ci: "{{ new_asa_ci.record.sys_id }}" 
        ip_address: "{{ asa_interface_dict[item] }}"
    delegate_to: localhost
    register: newints 
    loop: "{{ asa_interface_list }}" 
    when: ci_record.failed and ansible_network_os == 'asa'
   
